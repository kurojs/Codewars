/* 
A special type of prime is generated by the formula p = 2^m * 3^n + 1 where m and n can be any non-negative integer.

The first 5 of these primes are 2, 3, 5, 7, 13, and are generated as follows:

2 = 2^0 * 3^0 + 1
3 = 2^1 * 3^0 + 1
5 = 2^2 * 3^0 + 1
7 = 2^1 * 3^1 + 1
13 = 2^2 * 3^1 + 1
..and so on

You will be given a range and your task is to return the number of primes that have this property. 
For example, solve(0,15) = 5, because there are only 5 such primes >= 0 and < 15; they are 2,3,5,7,13. 
The upper limit of the tests will not exceed 1,500,000.

More examples in the test cases.

Good luck!
*/

// My solution

class Solution {

    public static int solve(int x, int y) {
        int count = 0;

        for (long pow2 = 1; pow2 < y; pow2 *= 2) {

            for (long pow3 = 1; pow3 < y; pow3 *= 3) {

                long candidate = pow2 * pow3 + 1;

                if (candidate >= y) break; 

                if (candidate >= x && isPrime(candidate)) {
                    count++;
                }
            }
        }

        return count;
    }

    public static boolean isPrime(long num) {
        if (num < 2) return false;
        if (num == 2) return true;
        if (num % 2 == 0) return false;

        long sqrt = (long) Math.sqrt(num);

        for (long i = 3; i <= sqrt; i += 2) {
            if (num % i == 0) return false;
        }

        return true;
    }
}

